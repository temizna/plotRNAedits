width <- 0.6
spacing <- 0.5
}
plot <- ggplot(data = tb, aes(x = context, y = freq, fill = substitution,
width = width)) + geom_bar(stat = "identity", colour = "black",
size = 0.2) + scale_fill_manual(values = colors) + facet_grid(sample ~
substitution) + ylab("Relative contribution") + coord_cartesian(ylim = c(0,
ymax)) + scale_y_continuous(breaks = seq(0, ymax, 0.1)) +
guides(fill = "none") + theme_bw() + theme(axis.title.y = element_text(size = 12,
vjust = 1), axis.text.y = element_text(size = 6), axis.title.x = element_text(size = 8),
axis.text.x = element_text(size = 5, angle = 90, vjust = 0.5),
strip.text.x = element_text(size = 8), strip.text.y = element_text(size = 8),
panel.grid.major.x = element_blank(), panel.spacing.x = unit(spacing,
"lines"))
return(plot)
}
plot_192_edit_profile(temp)
plot_192_edit_profile(temp, ymax=0.1)
plot_192_edit_profile<-function (mut_matrix, colors = NA, ymax = 0.2, condensed = FALSE)
{
freq <- full_context <- substitution <- context <- NULL
if (is.na(colors)) {
colors <- c("yellow","black","red","cyan","black","red",
"cyan","yellow","black","cyan","black","red")#COLORS6
}
if (length(colors) != 12) {
stop("Provide colors vector with length 6", call. = FALSE)
}
norm_mut_matrix <- apply(mut_matrix, 2, function(x) x/sum(x))
tb <- norm_mut_matrix %>% as.data.frame() %>% tibble::rownames_to_column("full_context") %>%
dplyr::mutate(substitution = stringr::str_replace(full_context,
"\\w\\[(.*)\\]\\w", "\\1"), context = stringr::str_replace(full_context,
"\\[.*\\]", "\\.")) %>% dplyr::select(-full_context) %>%
tidyr::pivot_longer(c(-substitution, -context), names_to = "sample",
values_to = "freq") %>% dplyr::mutate(sample = factor(sample,
levels = unique(sample)))
if (condensed == TRUE) {
width <- 1
spacing <- 0
}
else {
width <- 0.6
spacing <- 0.5
}
plot <- ggplot(data = tb, aes(x = context, y = freq, fill = substitution,
width = width)) + geom_bar(stat = "identity", colour = "black",
size = 0.2) + scale_fill_manual(values = colors) + facet_grid(sample ~
substitution) + ylab("Relative contribution") + coord_cartesian(ylim = c(0,
ymax)) + scale_y_continuous(breaks = seq(0, ymax, 0.1)) +
guides(fill = "none") + theme_bw() + theme(axis.title.y = element_text(size = 10,
vjust = 1), axis.text.y = element_text(size = 6), axis.title.x = element_text(size = 8),
axis.text.x = element_text(size = 6, angle = 90, vjust = 0.5),
strip.text.x = element_text(size = 8), strip.text.y = element_text(size = 8),
panel.grid.major.x = element_blank(), panel.spacing.x = unit(spacing,
"lines"))
return(plot)
}
plot_192_edit_profile(temp, ymax=0.1)
source("~/.active-rstudio-document")
ref_genome <-"BSgenome.Hsapiens.UCSC.mm10"
library(ref_genome, character.only = TRUE)
ref_genome <-"BSgenome.MusMusculus.UCSC.mm10"
library(ref_genome, character.only = TRUE)
ref_genome <-"BSgenome.MMusculus.UCSC.mm10"
library(ref_genome, character.only = TRUE)
#require(BSgenome.Hsapiens.UCSC.hg38)
BiocManager::install("BSgenome.Mmusculus.UCSC.mm10")
#vcf_files <- read.table("vcffull")
#sample_names <- read.table("samplenames")
#genotype <- read.table("genotypes")
vcf <- read_vcfs_as_granges(as.character(vcf_files[,1]), as.character(sample_names[,1]), ref_genome)
#vcf_files <- read.table("vcffull")
#sample_names <- read.table("samplenames")
#genotype <- read.table("genotypes")
vcf <- read_vcfs_as_granges(as.character(vcf_files[,1]), as.character(sample_names[,1]), ref_genome)
library(ref_genome, character.only = TRUE)
library('BSgenome.Mmusculus.UCSC.mm10')
ref_genome='BSgenome.Mmusculus.UCSC.mm10'
#vcf_files <- read.table("vcffull")
#sample_names <- read.table("samplenames")
#genotype <- read.table("genotypes")
vcf <- read_vcfs_as_granges(as.character(vcf_files[,1]), as.character(sample_names[,1]), ref_genome)
vcf_files <- read.table("vcffull")
sample_names <- read.table("samplenames")
vcf_files
vcf <- read_vcfs_as_granges(as.character(vcf_files[,1]), as.character(sample_names[,1]), ref_genome)
temp=edit_matrix(vcf, ref_genome, extension=1)
vcf
edit_matrix
vcf_list <- GenomicRanges::GRangesList(vcf_list)
gr <- vcf_list
gr_sizes <- length(gr)
gr
gr_sizes
rlang::last_trace()
edit_matrix(vcf,ref_genome, extension =1)
vcf_list
rm(list=ls(all=TRUE))
library(MutationalPatterns)
library(tidyverse)
library(GenomicRanges)
library(ComplexHeatmap)
library(reshape2)
library(gridExtra)
library(circlize)
library(BSgenome)
library(VariantAnnotation)
library(lsa)
library(stringi)
library(ggseqlogo)
library(readr)
library(phyloseq)
ref_genome='BSgenome.Mmusculus.UCSC.mm10'
vcf_files <- read.table("vcffull")
sample_names <- read.table("samplenames")
genotype <- read.table("genotypes")
vcf <- read_vcfs_as_granges(as.character(vcf_files[,1]), as.character(sample_names[,1]), ref_genome)
temp=edit_matrix(vcf, ref_genome, extension=1)
gr_cols <- colnames(S4Vectors::mcols(gr))
edit_type=function (vcf)
{
muts <- mutations_from_vcf(vcf)
types <- unlist(muts)
types <- gsub("T>A", "U>A", types)
types <- gsub("T>C", "U>C", types)
types <- gsub("T>G", "U>G", types)
types <- gsub("A>T", "A>U", types)
types <- gsub("C>T", "C>U", types)
types <- gsub("G>T", "G>U", types)
return(types)
return(types)
}
get_alt <- function(gr) {
gr_cols <- colnames(S4Vectors::mcols(gr))
if ("ALT" %in% gr_cols) {
alt <- gr$ALT
} else if ("alt" %in% gr_cols) {
alt <- gr$alt
} else if ("Alt" %in% gr_cols) {
alt <- gr$Alt
} else {
stop("Some of your data is missing a ALT column.", call. = FALSE)
alt <- Biostrings::DNAStringSetList()
}
return(alt)
}
edits_from_vcf<-function (vcf)
{
#.check_no_indels(vcf)
ref <- as.character(get_ref(vcf))
alt <- as.character(unlist(get_alt(vcf)))
muts <- paste(ref, alt, sep = ">")
return(muts)
}
edit_context<-function (vcf, ref_genome, extension = 1)
{
if (length(vcf) == 0) {
warning("Detected empty GRanges object.\n                Returning an empty list for this sample.",
call. = FALSE)
res <- list(types = NULL, context = NULL)
return(res)
}
edit_context <- mut_context(vcf, ref_genome, extension)
muts <- mutations_from_vcf(vcf)
types <- edit_type(vcf)
#x <- which(muts != types)
y <- edit_context
y <- chartr("T", "U", y)
edit_context <- y
res <- list(types, edit_context)
names(res) <- c("types", "context")
return(res)
}
edit_192_occurrences <- function(edit_context, gr_sizes) {
# These variables use non standard evaluation.
# To avoid R CMD check complaints we initialize them to NULL.
categories <- count <- NULL
# Determine nr of bases
nr_bases <- nchar(type_context$context[[1]])
middle_base <- ceiling(nr_bases / 2)
# Determine all possible contexts
bases_left <- c("A", "C", "G", "U")
bases_right <- c("A", "C", "G", "U")
base_subs <- c("[C>A]", "[C>G]", "[C>U]", "[U>A]", "[U>C]", "[U>G]",
"[G>A]", "[G>C]", "[G>U]","[A>C]", "[A>G]","[A>U]")
# Loop over each base substitution
full_context_poss <- vector("list", length(base_subs))
for (i in seq_along(base_subs)) {
sub <- base_subs[[i]]
sub_context <- sub
# Repeatedly add bases left and right
for (j in seq_len(middle_base - 1)) {
combi_tb <- tidyr::crossing(bases_left, sub_context, bases_right)
sub_context <- paste0(combi_tb$bases_left, combi_tb$sub_context, bases_right)
}
full_context_poss[[i]] <- sub_context
}
full_context_poss <- do.call(c, full_context_poss)
# Determine 96 context for all variants
full_context <- stringr::str_c(
substr(type_context$context, 1, middle_base - 1),
"[",
type_context$types,
"]",
substr(type_context$context, middle_base + 1, nr_bases)
) %>%
factor(levels = full_context_poss)
# Set names if they are not yet present
if (is.null(names(gr_sizes))) {
names(gr_sizes) <- seq_along(gr_sizes)
}
# Create vector describing the sample of each variant
sample_vector <- rep(names(gr_sizes), gr_sizes) %>%
factor(levels = names(gr_sizes))
# Count the mutations per type and per sample
counts <- tibble::tibble("categories" = full_context, "sample" = sample_vector) %>%
dplyr::filter(!is.na(categories)) %>%
dplyr::group_by(categories, sample, .drop = FALSE) %>%
dplyr::summarise(count = dplyr::n())
# Transform the data into a mutation matrix
counts <- tidyr::spread(counts, key = sample, value = count, fill = 0)
unnecesary_cols <- which(colnames(counts) == "<NA>")
mut_mat <- as.matrix(counts[, -c(1, unnecesary_cols)])
rownames(mut_mat) <- counts$categories
return(mut_mat)
}
plot_192_edit_profile<-function (mut_matrix, colors = NA, ymax = 0.2, condensed = FALSE)
{
freq <- full_context <- substitution <- context <- NULL
if (is.na(colors)) {
colors <- c("yellow","black","red","cyan","black","red",
"cyan","yellow","black","cyan","black","red")#COLORS6
}
if (length(colors) != 12) {
stop("Provide colors vector with length 6", call. = FALSE)
}
norm_mut_matrix <- apply(mut_matrix, 2, function(x) x/sum(x))
tb <- norm_mut_matrix %>% as.data.frame() %>% tibble::rownames_to_column("full_context") %>%
dplyr::mutate(substitution = stringr::str_replace(full_context,
"\\w\\[(.*)\\]\\w", "\\1"), context = stringr::str_replace(full_context,
"\\[.*\\]", "\\.")) %>% dplyr::select(-full_context) %>%
tidyr::pivot_longer(c(-substitution, -context), names_to = "sample",
values_to = "freq") %>% dplyr::mutate(sample = factor(sample,
levels = unique(sample)))
if (condensed == TRUE) {
width <- 1
spacing <- 0
}
else {
width <- 0.6
spacing <- 0.5
}
plot <- ggplot(data = tb, aes(x = context, y = freq, fill = substitution,
width = width)) + geom_bar(stat = "identity", colour = "black",
size = 0.2) + scale_fill_manual(values = colors) + facet_grid(sample ~
substitution) + ylab("Relative contribution") + coord_cartesian(ylim = c(0,
ymax)) + scale_y_continuous(breaks = seq(0, ymax, 0.1)) +
guides(fill = "none") + theme_bw() + theme(axis.title.y = element_text(size = 10,
vjust = 1), axis.text.y = element_text(size = 6), axis.title.x = element_text(size = 8),
axis.text.x = element_text(size = 6, angle = 90, vjust = 0.5),
strip.text.x = element_text(size = 8), strip.text.y = element_text(size = 8),
panel.grid.major.x = element_blank(), panel.spacing.x = unit(spacing,
"lines"))
return(plot)
}
edit_matrix<-function (vcf_list, ref_genome, extension = 1)
{
if (inherits(vcf_list, "list")) {
vcf_list <- GenomicRanges::GRangesList(vcf_list)
}
if (inherits(vcf_list, "CompressedGRangesList")) {
gr_sizes <- S4Vectors::elementNROWS(vcf_list)
gr <- BiocGenerics::unlist(vcf_list)
}
else if (inherits(vcf_list, "GRanges")) {
gr <- vcf_list
gr_sizes <- length(gr)
names(gr_sizes) <- "My_sample"
}
else {
.not_gr_or_grl(vcf_list)
}
type_context <- edit_context(gr, ref_genome, extension)
mut_mat <- edit_192_occurrences(type_context, gr_sizes)
return(mut_mat)
}
temp=edit_matrix(vcf, ref_genome, extension=1)
temp=edit_matrix(vcf, ref_genome, extension=1)
vcf_list <- GenomicRanges::GRangesList(vcf)
vcf_list
gr_sizes <- S4Vectors::elementNROWS(vcf_list)
gr <- BiocGenerics::unlist(vcf_list)
type_context <- edit_context(gr, ref_genome, extension)
extention=1
type_context <- edit_context(gr, ref_genome, extension)
extension=1
type_context <- edit_context(gr, ref_genome, extension)
type_context
mut_mat <- edit_192_occurrences(type_context, gr_sizes)
edit_matrix<-function (vcf_list, ref_genome, extension = 1)
{
if (inherits(vcf_list, "list")) {
vcf_list <- GenomicRanges::GRangesList(vcf_list)
}
if (inherits(vcf_list, "CompressedGRangesList")) {
gr_sizes <- S4Vectors::elementNROWS(vcf_list)
gr <- BiocGenerics::unlist(vcf_list)
}
else if (inherits(vcf_list, "GRanges")) {
gr <- vcf_list
gr_sizes <- length(gr)
names(gr_sizes) <- "My_sample"
}
else {
.not_gr_or_grl(vcf_list)
}
edit_context <- edit_context(gr, ref_genome, extension)
mut_mat <- edit_192_occurrences(edit_context, gr_sizes)
return(mut_mat)
}
temp=edit_matrix(vcf, ref_genome, extension=1)
rm(list=ls(all=TRUE))
source("~/plotRNAEdits/edit_type.R")
source("~/plotRNAEdits/get_ref_alt.R")
source("~/plotRNAEdits/edits_from_vcf.R")
source("~/plotRNAEdits/edit_context.R")
source("~/plotRNAEdits/edit_192_occurrences.R")
source("~/plotRNAEdits/plot_192_edit_profile.R")
source("~/plotRNAEdits/edit_matrix.R")
ref_genome='BSgenome.Mmusculus.UCSC.mm10'
vcf_files <- read.table("vcffull")
sample_names <- read.table("samplenames")
genotype <- read.table("genotypes")
vcf <- read_vcfs_as_granges(as.character(vcf_files[,1]), as.character(sample_names[,1]), ref_genome)
temp=edit_matrix(vcf, ref_genome, extension=1)
typeof(vcf)
vcf
?inherits
class(vcf)
inherits(vcf)
inherits(vcf,"CompressedGRangesList")
vcf_list=vcf
inherits(vcf_list, "CompressedGRangesList")
gr_sizes <- S4Vectors::elementNROWS(vcf_list)
gr <- BiocGenerics::unlist(vcf_list)
gr
gr_sizes
edit_context <- edit_context(gr, ref_genome, extension)
mut_mat <- edit_192_occurrences(edit_context, gr_sizes)
extension=1
edit_context <- edit_context(gr, ref_genome, extension)
mut_mat <- edit_192_occurrences(edit_context, gr_sizes)
edit_context
gr_sizes
mut_mat <- edit_192_occurrences(edit_context, gr_sizes)
source("~/plotRNAEdits/edit_matrix.R")
edit_context$context
source("~/plotRNAEdits/edit_192_occurrences.R")
source("~/plotRNAEdits/edit_context.R")
rm(list=ls(all=TRUE))
source("~/plotRNAEdits/edit_type.R")
source("~/plotRNAEdits/get_ref_alt.R")
source("~/plotRNAEdits/edits_from_vcf.R")
source("~/plotRNAEdits/edit_context.R")
source("~/plotRNAEdits/edit_192_occurrences.R")
source("~/plotRNAEdits/plot_192_edit_profile.R")
source("~/plotRNAEdits/edit_matrix.R")
ref_genome='BSgenome.Mmusculus.UCSC.mm10'
vcf_files <- read.table("vcffull")
sample_names <- read.table("samplenames")
genotype <- read.table("genotypes")
vcf <- read_vcfs_as_granges(as.character(vcf_files[,1]), as.character(sample_names[,1]), ref_genome)
temp=edit_matrix(vcf, ref_genome, extension=1)
source("~/plotRNAEdits/edit_context.R")
temp=edit_matrix(vcf, ref_genome, extension=1)
rm(list=ls(all=TRUE))
source("~/plotRNAEdits/edit_type.R")
source("~/plotRNAEdits/get_ref_alt.R")
source("~/plotRNAEdits/edits_from_vcf.R")
source("~/plotRNAEdits/edit_context.R")
source("~/plotRNAEdits/edit_192_occurrences.R")
source("~/plotRNAEdits/plot_192_edit_profile.R")
source("~/plotRNAEdits/edit_matrix.R")
temp=edit_matrix(vcf, ref_genome, extension=1)
ref_genome='BSgenome.Mmusculus.UCSC.mm10'
vcf_files <- read.table("vcffull")
sample_names <- read.table("samplenames")
genotype <- read.table("genotypes")
vcf <- read_vcfs_as_granges(as.character(vcf_files[,1]), as.character(sample_names[,1]), ref_genome)
temp=edit_matrix(vcf, ref_genome, extension=1)
temp
plot_192_edit_profile()
plot_192_edit_profile(temp)
source("~/plotRNAEdits/plot_192_edit_profile.R")
plot_192_edit_profile(temp, ymax=0.1)
wDir<-"/Users/temizna/Google_Drive/UMN/HARRIS/apobec3b/RNA_EDITING/PANCREAS/"
setwd(wDir)
#todo<-c("44_A3B.pancreas","48_A3B.pancreas","49_A3B.pancreas","125_APO1.pancreas","137_APO1.pancreas","153_APO1.pancreas")
# Enter VCF file paths as a table that will be fed in
#vcf_files <- read.table("vcflist")
#vcf_files <- read.table("vcflist20")
vcf_files <- read.table("vcflistfinal")
#vcf_files <- read.table("vcflist20-10")
# Enter VCF sample names
sample_names <- read.table("samplenames")
vcf_files
vcf_files <- read.table("vcflistfinal")[1:6,1]
sample_names <- read.table("samplenames")[1:6,1]
vcfs <- read_vcfs_as_granges(as.character(vcf_files[,1]), as.character(sample_names[,1]), ref_genome)
vcf_files[, 1]
vcf_files
vcf_files <- read.table("vcflistfinal")[1:6,]
sample_names <- read.table("samplenames")[1:6,]
vcfs <- read_vcfs_as_granges(as.character(vcf_files[,1]), as.character(sample_names[,1]), ref_genome)
vcf_files
vcf_filesr <- read.table("vcflistfinal")[1:6,]
sample_namesr <- read.table("samplenames")[1:6,]
vcf <- read_vcfs_as_granges(as.character(vcf_filesr), as.character(sample_namesr), ref_genome)
edit_mat<-edit_matrix(vcf,ref_genome = ref_genome, extension = 1)
editcompile_rna <- cbind(edit_mat[,1]+edit_mat[,2]+edit_mat[,3]+edit_mat[,4]+edit_mat[,5]+edit_mat[,6])
#todo<-c("44_A3B.pancreas","48_A3B.pancreas","49_A3B.pancreas","125_APO1.pancreas","137_APO1.pancreas","153_APO1.pancreas")
# Enter VCF file paths as a table that will be fed in
#vcf_files <- read.table("vcflist")
#vcf_files <- read.table("vcflist20")
vcf_files <- read.table("vcflistfinal")
#vcf_files <- read.table("vcflist20-10")
# Enter VCF sample names
sample_names <- read.table("samplenames")
vcfs <- read_vcfs_as_granges(as.character(vcf_files[,1]), as.character(sample_names[,1]), ref_genome)
# Extract trinucleotide matrix
mut_mat <- mut_matrix(vcf_list = vcfs, ref_genome = ref_genome)
mutcompile_dna <- cbind(mut_mat[,7]+mut_mat[,8]+mut_mat[,9]+mut_mat[,10]+mut_mat[,11]+mut_mat[,12])
colnames(mutcompile_dna)<-"DNA"
colnames(editcompile_rna)<-"RNA"
editcompile_rna <- cbind(edit_mat[,1]+edit_mat[,2]+edit_mat[,3]+edit_mat[,4]+edit_mat[,5]+edit_mat[,6])
editcompile_rna
a <- plot_192_edit_profile(editcompile_rna, ymax=0.1)
b <- plot_96_profile(mutcompile_dna, ymax=0.1)
types=grid.arrange(a,b,nrow = 2, ncol = 1)
types=grid.arrange(a,b,nrow = 1, ncol = 2)
ggsave("96_bytpes_pancreas.final.pdf",types,width=7,height=3)
ggsave("96_bytpes_pancreas.final.edits.pdf",types,width=15,height=3)
ggsave("96_bytpes_pancreas.final.edits.pdf",a,width=15,height=3)
a2 <- plot_192_edit_profile(edit_mat, ymax=0.1)
ggsave("96_bytpes_pancreas.final.edits.pdf",a2,width=15,height=12)
ggsave("96_bytpes_pancreas.final.edits.all.pdf",a2,width=15,height=12)
ggsave("96_bytpes_pancreas.final.edits.pdf",a,width=15,height=3)
wDir<-"/Users/temizna/Google_Drive/UMN/HARRIS/apobec3b/RNA_EDITING/LIVER/"
setwd(wDir)
#todo<-c("44_A3B.LIVER","48_A3B.LIVER","49_A3B.LIVER","125_APO1.LIVER","137_APO1.LIVER","153_APO1.LIVER")
# Enter VCF file paths as a table that will be fed in
#vcf_files <- read.table("vcflist")
#vcf_files <- read.table("vcflist20")
vcf_files <- read.table("vcflistfinal")
vcf_files
vcf_filesr <- read.table("vcflistfinal")[1:6,]
sample_namesr <- read.table("samplenames")[1:6,]
vcf <- read_vcfs_as_granges(as.character(vcf_filesr), as.character(sample_namesr), ref_genome)
edit_mat<-edit_matrix(vcf,ref_genome = ref_genome, extension = 1)
editcompile_rna <- cbind(edit_mat[,1]+edit_mat[,2]+edit_mat[,3]+edit_mat[,4]+edit_mat[,5]+edit_mat[,6])
colnames(editcompile_rna)<-"RNA"
a <- plot_192_edit_profile(editcompile_rna, ymax=0.1)
b <- plot_96_profile(mutcompile_dna, ymax=0.1)
a2 <- plot_192_edit_profile(edit_mat, ymax=0.1)
ggsave("96_bytpes_liver.final.edits.all.pdf",a2,width=15,height=12)
ggsave("96_bytpes_liver.final.edits.pdf",a,width=15,height=3)
rm(list=ls(all=TRUE))
library(MutationalPatterns)
library(tidyverse)
library(GenomicRanges)
library(ComplexHeatmap)
library(reshape2)
library(gridExtra)
library(circlize)
library(BSgenome)
library(VariantAnnotation)
library(lsa)
library(stringi)
library(ggseqlogo)
library(readr)
library(vegan)
library(ade4)
library(stringr)
library(ggplot2)
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
getwd()
setwd("parent_directory")
setwd("/Users/temizna/")
create("plotRNAEdits")
source("~/plotRNAEdits/R/edit_type.R")
source("~/plotRNAEdits/R/get_ref_alt.R")
document()
setwd("/Users/temizna/plotRNAedits")
document()
setwd("..")
install("plotRNAEdits")
library(plotRNAEdits)
edit_context
edit_context()
library(plotRNAEdits)
library(plotRNAEdits)
edit_context()
edit_context
?edit_context
edit_type
getwd()
setwd("/Users/temizna/plotRNAEdits")
getwd()
document()
